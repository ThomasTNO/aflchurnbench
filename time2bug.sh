#!/bin/bash

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Developed by Xiaogang Zhu <rosenzhu@hotmail.com> and Marcel Boehme <marcel.boehme@monash.edu>

#################### Get time to bugs ###################

IFS=$'\n'

# location of "plot_files": 
#  e.g., $EXPERIMENT_FOLDERS/openssl_x509-afl/trial-753301/corpus/plot_data
EXPERIMENT_CONFIG=./experiment-config.yaml
EXPERIMENT_FOLDERS=$(cat $EXPERIMENT_CONFIG | grep "crash_plotdata_filestore" | cut -d: -f2 | xargs)
if [ ! -d "$EXPERIMENT_FOLDERS" ]; then
    echo "Experiment results do not exist."
    exit 1
fi

# location of bug log files generated by getbugs.sh
# $BUG_LOG_DIR/*.log
BUG_FOLDER_NAME=buglogs
BUG_LOG_DIR=$EXPERIMENT_FOLDERS/$BUG_FOLDER_NAME

ALLTIME2BUG=all_time2bugs.txt
SUFFIX=time_bug.txt
ADDR_NONE=NONE

# check if logfiles exists
if [ ! -d "$BUG_LOG_DIR" ]; then
    echo "Log files do not exist."
    exit 1
fi


echo "crash_time, benchmark, fuzzer, trial, bug_type, stack_hash, bug_addr, bug_code_line1, bug_code_line2, bug_code_line3" > $BUG_LOG_DIR/$ALLTIME2BUG

for logfile in $(ls -1d $BUG_LOG_DIR/*.log); do
    benchmark_fuzzer=$(echo ${logfile} | rev | cut -d/ -f1 | rev | cut -d. -f1)
    benchmark=$(echo $benchmark_fuzzer | rev | cut -d- -f2- | rev)
    fuzzer=$(echo $benchmark_fuzzer | rev | cut -d- -f1 | rev) # our fuzzer names never contain dash

    echo "$benchmark, $fuzzer"

    crash_file_summary=$(for line in $(cat ${logfile}); do
        line_crashid=$(echo $line | grep ">>> /data/")
        if [ -n "$line_crashid" ]; then
            trial_id=$(echo $line_crashid | cut -d/ -f4)
            crash_id=$(echo $line_crashid | cut -d/ -f7 | cut -d, -f1 | cut -d: -f2)
            echo "$crash_id, $trial_id"
        fi
        summary=$(echo $line | grep SUMMARY)
        if [ -n "$summary" ]; then
            bug_type=$(echo $summary | cut -d: -f3 | cut -d\( -f1)
            # bug_address=$(echo $summary | cut -d+ -f2 | sed 's/)//')
            bug_address=$(echo $summary | grep -o "0x[0-9a-f]*")
            if [ -z "$bug_address" ]; then
                bug_address="$ADDR_NONE"
            fi
            echo "$bug_type, $bug_address"
        fi
    done | sed ':a;N;$!ba;s/\n /, /g' )

    trim_crash_file_summary=$(for tbl in $(echo "${crash_file_summary}"); do
        count=$(echo "${tbl}" | awk -F"," '{print NF-1}')
        if [ $count = 3 ]; then
            echo "$tbl"
        fi
    done )

    bug_first_crash_id=$(for trial_reason in $(echo "$trim_crash_file_summary" | cut -d, -f2- | sort | uniq); do
        echo "$trim_crash_file_summary" | grep -e "$trial_reason" | sort -n | head -n1
    done )

    # $bug_first_crash_id== 000005, trial-758112, SEGV , 0x4d5f96
    for trial in $(echo "$bug_first_crash_id" | cut -d, -f2); do
    (
        tr=$(echo $trial | xargs)
        plot_file=$EXPERIMENT_FOLDERS/${benchmark}-${fuzzer}/$tr/corpus/plot_data
        if [ ! -f "$plot_file" ]; then
            continue
        fi

        init_time=$(cat $plot_file | head -n2 | tail -n1 | cut -d, -f1)

        for cid in $(echo "$bug_first_crash_id" | grep "$tr" | cut -d, -f1); do
            restinfo=$(echo "$bug_first_crash_id" | grep "$tr" | grep "$cid" | cut -d, -f2-)
            bug_type=$(echo $restinfo | cut -d, -f2 | tr -d '[:space:]')
            bug_addr=$(echo $restinfo | cut -d, -f3 | tr -d '[:space:]')
            if [ "$bug_addr" = "$ADDR_NONE" ]; then
                bug_3codelines="$ADDR_NONE,$ADDR_NONE,$ADDR_NONE"
                stack_hash="$ADDR_NONE"
            else
                stacktrace=$(cat $logfile | grep "$bug_addr " -A2 | head -n3)
                stack_hash=$(echo "$stacktrace" | grep "\#1 " -C1 | sed "s/^[ ]*//g" | cut -d" " -f4- | md5sum | cut -c-8)
                bug_3codelines=$(echo "$stacktrace" | grep "\#1 " -C1 | sed "s/^[ ]*//g" | cut -d" " -f4- |  sed ':a;N;$!ba;s/\n/, /g')
            fi
            # data from file plot_data:
            # # unix_time, cycles_done, cur_path, paths_total, pending_total, pending_favs, map_size, unique_crashes, unique_hangs, max_depth, execs_per_sec
            # 1610748578, 0, 0, 1, 1, 1, 0.02%, 0, 0, 1, 380.95
            for crash_num in $(cat $plot_file | grep '^[0-9]' | cut -d, -f8 | sort -n | uniq); do
                # get (unix_time, crash_num), where unix_time is the first time that the crash_num appers
                unixtime_numcrash=$(cat $plot_file | grep '^[0-9]' | cut -d, -f 1,8 | grep -w $crash_num | sort -n | uniq | head -n1)
                unix_time=$(echo $unixtime_numcrash | cut -d, -f1 | tr -d '[:space:]')
                crash_time=$((unix_time - init_time))
                num_crash=$(echo $unixtime_numcrash | cut -d, -f2 | tr -d '[:space:]')
                # echo "$crash_time, ${num_crash}"
                # $(echo $restinfo | tr -d '[:space:]')
                if [ "$cid" -lt "$num_crash" ]; then
                    echo "$crash_time, ${benchmark}, $fuzzer, $tr, $bug_type, $stack_hash, $bug_addr, $bug_3codelines"
                    break
                fi
            done   
        done
    )&
    done | sort | uniq > $BUG_LOG_DIR/${benchmark}-${fuzzer}-$SUFFIX
    wait

    # de-duplicate based on stack hash
    for trial_hash in $(cat $BUG_LOG_DIR/${benchmark}-${fuzzer}-$SUFFIX | cut -d, -f2-6 | sort | uniq); do
        cat $BUG_LOG_DIR/${benchmark}-${fuzzer}-$SUFFIX | grep "$trial_hash" | sort -n | head -n1
    done | sed "s/[(][^)]*[)]/()/g" | sed "s/[<][^)]*[>]/<>/g" >> $BUG_LOG_DIR/$ALLTIME2BUG
done

